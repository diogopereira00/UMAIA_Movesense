
const db = require("../lib/db.js");

module.exports.studyVersion = (req, res, next) => {
    var studyID = req.params.study_id;
    var studie = db.query(`SELECT studies.version from studies where id =${db.escape(studyID)}`, (err, result) => {
        if (err) {
            throw err;
            return res.status(400).send({
                msg: err,
            });
        }
        if (!result.length) {
            return res.status(401).send({
                msg: "Não existe nenhum user com esse id",
            });
        }

        console.log(result[0]);

        return res.status(200).send({
            version: result[0].version,
        });
    })

}


module.exports.userStudies = (req, res, next) => {
    var userID = req.params.user_id;
    console.log(userID)
    var studie = db.query(`SELECT * FROM user_studies WHERE user_id =${db.escape(userID)}`, (err, result) => {
        if (err) {
            throw err;
            return res.status(400).send({
                msg: err,
            });
        }
        if (!result.length) {
            return res.status(401).send({
                msg: "Não existe nenhum user com esse id",
            });
        }

        console.log(result[0]);

        return res.status(200).send({
            studiesId: result.map(res => res.study_id),
        });
    })

}

module.exports.options = (req, res, next) => {
    var options = db.query(`SELECT * FROM options`, (err, result) => {
        if (err) {
            throw err;
            return res.status(400).send({
                msg: err,
            });
        }
        if (!result.length) {
            return res.status(401).send({
                msg: "Não existe nenhum user com esse id",
            });
        }

        console.log(result[0]);

        return res.status(200).send({
            options: result,
        });
    })

}

module.exports.questionsOptions = (req, res, next) => {
    var options = db.query(`SELECT * FROM question_options`, (err, result) => {
        if (err) {
            throw err;
            return res.status(400).send({
                msg: err,
            });
        }
        if (!result.length) {
            return res.status(401).send({
                msg: "Não existe nenhum user com esse id",
            });
        }

        console.log(result[0]);

        return res.status(200).send({
            question_options: result,
        });
    })

}


module.exports.questionTypes = (req, res, next) => {


    var options = db.query(`SELECT * FROM question_types`, (err, result) => {
        if (err) {
            throw err;
            return res.status(400).send({
                msg: err,
            });
        }
        if (!result.length) {
            return res.status(401).send({
                msg: "Não existe nenhum user com esse id",
            });
        }

        console.log(result[0]);

        return res.status(200).send({
            types: result,
        });
    })

}

module.exports.studiesAllInfoUser = (req, res, next) => {
    var userID = req.params.user_id;
    var studie = db.query(`SELECT studies.id as 'studies_id', studies.name as 'studies_name', studies.description as 'studies_description',studies.adminPassword as 'studies_adminPassword',studies.start_date as 'studies_startdate', studies.end_date as 'studies_enddate', studies.version as 'studies_version',
	surveys.id as 'surveys_id', surveys.title as 'surveys_title', surveys.description as 'surveys_description', surveys.expected_time as 'surveys_expected_time', surveys.created_at as 'surveys_created_at', surveys.updated_at as 'surveys_updated_at',
	sections.id as 'sections_id', sections.name as 'sections_name', 
	questions.id as 'questions_id', questions.text as 'questions_text', questions.question_type_id as 'questions_type_id', 
	question_options.*
	FROM user_studies
	INNER JOIN studies ON user_studies.study_id = studies.id
	INNER JOIN surveys ON studies.id = surveys.study_id
	INNER JOIN sections ON surveys.id = sections.survey_id
	INNER JOIN questions ON sections.id = questions.section_id
	INNER JOIN question_options ON question_options.question_id = questions.id
	WHERE user_studies.user_id = ${db.escape(userID)}
	`, (err, result) => {
        if (err) {
            throw err;
            return res.status(400).send({
                msg: err,
            });
        }
        if (!result.length) {
            return res.status(401).send({
                msg: "Não existe nenhum user com esse id",
            });
        }

        console.log(result[0]);
        // Execute the query (assuming the result is stored in a variable called "result")
        const studies = new Map();
        const optionsMap = new Map();

        for (const row of result) {
            const { studies_id, studies_name, studies_description, studies_adminPassword, studies_startdate, studies_enddate, studies_version, surveys_id, surveys_title, surveys_description, surveys_expected_time, surveys_created_at, surveys_updated_at, name,
                sections_id, sections_name, questions_id, questions_text, questions_type_id, start_time, end_time, version, title, expected_time, created_at, updated_at, text, question_type_id, section_name, option_id } = row;

            if (!studies.has(studies_id)) {
                studies.set(studies_id, {
                    study_id: studies_id,
                    study_name: studies_name,
                    study_description: studies_description,
                    study_adminPassword: studies_adminPassword,
                    study_startdate: studies_startdate,
                    study_enddate: studies_enddate,
                    study_version: studies_version,
                    surveys: []
                });
            }

            let survey = studies.get(studies_id).surveys.find(survey => survey.surveys_id === surveys_id);
            if (!survey) {
                survey = {
                    surveys_id: surveys_id,
                    survey_title: surveys_title,
                    survey_description: surveys_description,
                    survey_expected_time: surveys_expected_time,
                    survey_created_at: surveys_created_at,
                    survey_updated_at: surveys_updated_at,
                    sections: []
                };
                studies.get(studies_id).surveys.push(survey);
            }

            let section = survey.sections.find(section => section.section_id === sections_id);
            if (!section) {
                section = {
                    section_id: sections_id,
                    section_name: sections_name,
                    questions: []
                };
                survey.sections.push(section);
            }

            // Check if the options map has an entry for the current question
            if (!optionsMap.has(questions_id)) {
                optionsMap.set(questions_id, new Set());
            }

            // Add the option to the set, if an option with the same id does not already exist in the set
            const optionsSet = optionsMap.get(questions_id);
            if (!optionsSet.has(option_id)) {
                optionsSet.add(option_id);
            }

            // Convert the set to an array and assign it to the options property of the question object
            const options = Array.from(optionsSet).map(id => ({ option_id: id }));
            const newQuestion = {
                question_id: questions_id,
                question_text: questions_text,
                question_type_id: questions_type_id,
                options
            };

            // Check if the question already exists in the "questions" array
            const existingQuestion = section.questions.find(q => q.question_id === questions_id);
            if (existingQuestion) {
                // Update the options of the existing question
                existingQuestion.options = options;
            } else {
                // Add the new question to the "questions" array
                section.questions.push(newQuestion);
            }

        }

        // Convert the map to an array and return it as a JSON object
        res.send(Array.from(studies.values()));

    })

}

module.exports.surveysUser = (req, res, next) => {
    var userID = req.params.user_id;
    console.log(userID)

    var query = `SELECT user_surveys.user_id, studies.name, survey_id, surveys.study_id, surveys.title, surveys.description, user_surveys.start_time, user_surveys.end_time, user_surveys.isCompleted, surveys.expected_time FROM user_surveys 
	INNER JOIN surveys on user_surveys.survey_id = surveys.id 
	INNER JOIN studies on studies.id = surveys.study_id 
	WHERE user_surveys.user_id =${db.escape(userID)}`

    //ta a retornar user_id, name, survey_id, title, description, start_time, end_time, expected_time

    var user = db.query(query, (err, result) => {
        if (err) {
            throw err;
            return res.status(400).send({
                msg: err,
            });
        }
        if (!result.length) {
            return res.status(401).send({
                msg: "Não existe nenhum user com esse id",
            });
        }

        console.log(result[0]);




        return res.status(200).send({ surveys: result });
    })

}

module.exports.addUserSurvey = (req, res, next) => {
    console.log(req.headers)
    let userSurveys = JSON.parse(req.body.jsonString);
    console.log(userSurveys)

    db.query(`INSERT INTO user_surveys (user_id, survey_id, start_time, end_time, isCompleted) VALUES ?`,
        [userSurveys.map(us => [us.user_id, us.survey_id, new Date(us.start_time).toISOString().slice(0, 19).replace('T', ' '), new Date(us.end_time).toISOString().slice(0, 19).replace('T', ' '), us.isCompleted])],
        (err, ress) => {
            if (err) {
                throw err;
                return res.status(401).send({
                    msg: "Erro",
                });
            }
            return res.status(200).send({
                msg: "Dados adicionados",
            });
        }
    );
}

module.exports.addUserSurvey = (req, res, next) => {
    console.log(req.headers)
    let userSurveys = JSON.parse(req.body.jsonString);
    console.log(userSurveys)

    db.query(`INSERT IGNORE INTO user_surveys (user_id, survey_id, start_time, end_time, isCompleted) VALUES ?`,
        [userSurveys.map(us => [us.user_id, us.survey_id, new Date(us.start_time).toISOString().slice(0, 19).replace('T', ' '), new Date(us.end_time).toISOString().slice(0, 19).replace('T', ' '), us.isCompleted])],
        (err, ress) => {
            if (err) {
                throw err;
                return res.status(401).send({
                    msg: "Erro",
                });
            }
            return res.status(200).send({
                msg: "Dados adicionados",
            });
        }
    );
}

module.exports.teste = (req, res, next) => {
    const data = JSON.parse(req.body.jsonString);
    console.log(data)
    // Iterate over the array of user surveys
    data.forEach((userSurveyData) => {
        const answersData = userSurveyData.answers;

        // Insert the user survey data into the user_surveys table
        db.query(
            'INSERT INTO user_surveys SET ?',
            {
                user_id: userSurveyData.user_id,
                survey_id: userSurveyData.survey_id,
                start_time: new Date(userSurveyData.start_time).toISOString().slice(0, 19).replace('T', ' '),
                end_time: new Date(userSurveyData.end_time).toISOString().slice(0, 19).replace('T', ' '),
                isCompleted: userSurveyData.isCompleted
            },
            (error, results) => {
                if (error) {
                    console.error(error);
                    res.status(500).json({ message: 'Error inserting user survey data' });
                } else {
                    // Insert the answers data into the answers table
                    answersData.forEach((answer) => {
                        db.query(
                            'INSERT INTO answers SET ?',
                            {
                                question_id: answer.question_id,
                                user_survey_id: results.insertId,
                                text: answer.text
                            },
                            (error, results) => {
                                if (error) {
                                    console.error(error);
                                    res.status(500).json({ message: 'Error inserting answer data' });
                                }
                            }
                        );
                    });
                }
            }
        );
    });

    res.status(200).json({ message: 'Data inserted successfully' });
}